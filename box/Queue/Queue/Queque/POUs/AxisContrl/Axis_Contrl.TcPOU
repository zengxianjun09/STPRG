<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="Axis_Contrl" Id="{28d0d1f1-ffc8-4903-82f1-591feeb86d4c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Axis_Contrl
VAR_IN_OUT
	HMI                      : Axis_HMI_Struct;
	Axis_CMD_Itf             : REC_CMD_DATA;
	Axis_ref                 : axis_ref;
END_VAR
VAR_INPUT
	mode                     : UDINT;
	bStop_Man                : BOOL;
	bStop_Auto               : BOOL;
	bHalt_Man                : BOOL;
	bReset_Man               : BOOL;
	bReset_Auto              : BOOL;
	bJog_F                   : BOOL;
	bJog_B                   : BOOL;
	bAbsGo_Man               : BOOL;
	bAbsGo_Auto              : BOOL;
	bVelGo_Man               : BOOL;
	bVelGo_Auto              : BOOL;
	bRelGo_Man               : BOOL;
	bRelGo_Auto              : BOOL;
	bModGo_Man               : BOOL;
	bModGo_Auto              : BOOL;
	bAddGo_Man               : BOOL;
	fSetAbsPos_Man           : LREAL;
	fSetAbsPos_Auto          : LREAL;
	fSetRelPos_Man           : LREAL;
	fSetRelPos_Auto          : LREAL;
	fSetModPos_Man           : LREAL;
	fSetModPos_Auto          : LREAL;
	fSetVel_Man              : LREAL;
	fSetVel_Auto             : LREAL;
	softLimitPOS_FW          : LREAL;
	softLimitPOS_BW          : LREAL;
	bForwordEnable           : BOOL:= TRUE;
	bBackwordEnable          : BOOL:= TRUE;
	bFW_LimitSwith           : BOOL:= TRUE;
	bBW_LimitSwith           : BOOL:= TRUE;
	bDog_PointSwith          : BOOL;
END_VAR
VAR_OUTPUT
	bPowerEn                 : BOOL;
	bBusy                    : BOOL;
	bDone                    : BOOL;
	bAborted                 : BOOL;
	bError                   : BOOL;
	nErrorID                 : UDINT;
	cErrorTXT                : STRING;
	nStatus                  : STRING;
END_VAR	
VAR

	mc_Stop                  : MC_Stop;
	mc_Reset                 : MC_Reset;
	mc_Power                 : MC_Power;
	mc_Jog                   : MC_Jog;
	mc_Home                  : MC_Home;
	mc_AbsMove               : MC_MoveAbsolute;
	mc_VelMove               : MC_MoveVelocity;
	mc_RelMove               : MC_MoveRelative;
	mc_ModMove               : MC_MoveModulo;
	mc_ReadAxisError         : MC_ReadAxisError;
	
	mc_AddMove               : MC_MoveAdditive;
	mc_Halt                  : MC_Halt;
	
	
	AbsMove_Rtrig            : R_Trig;
	VelMove_Rtrig            : R_Trig;
	RelMove_Rtrig            : R_Trig;
	ModMove_Rtrig            : R_Trig;

	
	AbsMove_state            : INT;
	VelMove_state            : INT;
	RelMove_state            : INT;
	ModMove_state            : INT;
	
	
	CMD_state                : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Axis_AbsMove();
Axis_AddMove();
Axis_Home();
Axis_Jog();
Axis_ModMove();
Axis_Power();
Axis_RelMove();
Axis_Reset();
Axis_Stop();
Axis_VelMove();
HMI_Mapping();
Read_AxisError();
Axis_Halt();
Queue_Rec_Cmd();
//---------------------------------------
IF bError THEN
	nStatus:='ERROR';
ELSIF bDone AND (NOT bBusy) THEN
	nStatus:='DONE';
ELSIF Main.sReceiveData.Delete_Queue.FUNCTIONCODE = G05 THEN
	nStatus:= 'RESET DONE';
ELSE
	nStatus:= '';
END_IF]]></ST>
    </Implementation>
    <Method Name="Axis_AbsMove" Id="{f89b3f2f-af25-4116-9491-3a9f32cc85b6}">
      <Declaration><![CDATA[METHOD Axis_AbsMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_AbsMove( Axis:= Axis_ref );

IF ((bReset_Man OR bReset_Auto) AND (bError OR NOT mc_AbsMove.Busy)) 
	OR bStop_Auto OR bStop_Man  THEN
	mc_AbsMove.Execute:= FALSE;
	AbsMove_state:= 0;
END_IF

CASE mode OF
	1:
		mc_AbsMove.Position := fSetAbsPos_Man;
		mc_AbsMove.Velocity := ABS(fSetVel_Man);	
	2:
		mc_AbsMove.Position := fSetAbsPos_Auto;
		mc_AbsMove.Velocity := ABS(fSetVel_Auto);	
END_CASE

AbsMove_Rtrig(CLK:= ((mode = 1) AND bAbsGo_Man) OR ((mode = 2) AND bAbsGo_Auto) );

CASE AbsMove_state OF
	0:	
    	mc_AbsMove.Execute:= FALSE;
		IF AbsMove_Rtrig.Q THEN
			IF (NOT bForwordEnable) OR (NOT bBackwordEnable) 
				OR (mc_AbsMove.Position > softLimitPOS_FW) 
				OR (mc_AbsMove.Position < softLimitPOS_BW) 
				OR (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith)
				OR bError
				THEN
				bError:= TRUE;
				bBusy:= FALSE;
				bDone:= FALSE;
				bAborted:= FALSE;
				IF (NOT bForwordEnable) OR (NOT bBackwordEnable) THEN
					nErrorID:= 1;
					cErrorTXT:= 'Error: Axis not enable';
				ELSIF (mc_AbsMove.Position > softLimitPOS_FW) OR
					  (mc_AbsMove.Position < softLimitPOS_BW) THEN
					nErrorID:= 2;
					cErrorTXT:= 'Error: Axis Absolute Movement out of Limits';
				ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
					nErrorID:= 3;
					cErrorTXT:= 'Error: Axis reach limit swith';
				END_IF
			ELSE
				bBusy:= TRUE;
				bDone:= FALSE;
				bAborted:= FALSE;
				bError:= FALSE;
				nErrorID:= 0;
				cErrorTXT:= '';	
				AbsMove_state:= 1;
			END_IF
		END_IF
	1:
		mc_AbsMove.Execute:= TRUE;
		IF mc_AbsMove.Error THEN
			mc_AbsMove.Execute:= FALSE;
			bError:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			bDone:= FALSE;
			nErrorID:= DWORD_TO_UDINT (mc_AbsMove.ErrorID);
			cErrorTXT:= 'Error: Axis absolute movement error';
			AbsMove_state:= 0;
		ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
			mc_AbsMove.Execute:= FALSE;
			bError:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			bDone:= FALSE;
			nErrorID:= 3;
			cErrorTXT:= 'Error: Axis reach limit swith';
			AbsMove_state:= 0;
		ELSIF mc_AbsMove.Done THEN
			mc_AbsMove.Execute:= FALSE;
			bDone:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			AbsMove_state:= 0;
		ELSIF mc_AbsMove.CommandAborted THEN
			mc_AbsMove.Execute:= FALSE;
			bAborted:= TRUE;
			bDone:= FALSE;
			bBusy:= FALSE;
			AbsMove_state:= 0;
		END_IF
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_AddMove" Id="{113be54a-4d66-4262-bd1d-64c69b022cbd}">
      <Declaration><![CDATA[METHOD Axis_AddMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_AddMove(
	Axis:=Axis_ref , 
	Execute:=bAddGo_Man , 
	Distance:=fSetRelPos_Man , 
	Velocity:= ABS(fSetVel_Man) , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_Halt" Id="{0fd59c52-4119-48b4-a322-46a3803a20b9}">
      <Declaration><![CDATA[METHOD Axis_Halt
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_Halt(
	Axis:= Axis_ref , 
	Execute:= bHalt_Man , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_Home" Id="{3a0e4d30-817c-46bc-9608-157c8fdfe972}">
      <Declaration><![CDATA[METHOD Axis_Home
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_Home(
	Axis:= Axis_ref , 
	Position:= , 
	HomingMode:= MC_Direct , 
	bCalibrationCam:= bDog_PointSwith , 
	 );
	 
IF ((bReset_Man OR bReset_Auto) AND (bError OR NOT mc_Home.Busy)) 
	OR bStop_Auto OR bStop_Man  THEN
	mc_Home.Execute:= FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_Jog" Id="{a2fb16fa-e812-4f2c-b36a-9ca868d1e555}">
      <Declaration><![CDATA[METHOD Axis_Jog
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_Jog(
	Axis:= Axis_ref , 
	JogForward:= bJog_F AND (mode = 1) AND bForwordEnable AND bFW_LimitSwith AND NOT bError , 
	JogBackwards:= bJog_B AND (mode = 1) AND bBackwordEnable AND bBW_LimitSwith AND NOT bError, 
	Mode:= MC_JOGMODE_CONTINOUS , 
	Position:= , 
	Velocity:= fSetVel_Man, 
	 );

   ]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_ModMove" Id="{2295f05c-d41f-44bb-8170-bace4a75ceb7}">
      <Declaration><![CDATA[METHOD Axis_ModMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_ModMove( Axis:= Axis_ref , Direction:= MC_Shortest_Way );

IF ((bReset_Man OR bReset_Auto) AND (bError OR NOT mc_ModMove.Busy)) 
	OR bStop_Auto OR bStop_Man  THEN
	mc_ModMove.Execute:= FALSE;
	ModMove_state:= 0;
END_IF

CASE mode OF
	1:
		mc_ModMove.Velocity:= ABS(fSetVel_Man);
		mc_ModMove.Position:= fSetModPos_Man;
	2:
		mc_ModMove.Velocity:= ABS(fSetVel_Auto);
		mc_ModMove.Position:= fSetModPos_Auto;
END_CASE

ModMove_Rtrig(CLK:= ((mode = 1) AND bModGo_Man) OR ((mode = 2) AND bModGo_Auto) );

CASE ModMove_state OF
	0:
		mc_ModMove.Execute:= FALSE;
		IF ModMove_Rtrig.Q THEN
			IF (NOT bForwordEnable) OR (NOT bBackwordEnable) 
				OR (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith)
				OR bError
				THEN
				bError:= TRUE;
				bBusy:= FALSE;
				bDone:= FALSE;
				bAborted:= FALSE;
				IF (NOT bForwordEnable) OR (NOT bBackwordEnable) THEN
					nErrorID:= 1;
					cErrorTXT:= 'Error: Axis not enable';
				ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
					nErrorID:= 3;
					cErrorTXT:= 'Error: Axis reach limit swith';
				END_IF
			ELSE 
				bBusy:= TRUE;
				bDone:= FALSE;
				bAborted:= FALSE;
				bError:= FALSE;
				nErrorID:= 0;
				cErrorTXT:= '';	
				ModMove_state:= 1;
			END_IF
		END_IF
	1:
		mc_ModMove.Execute:= TRUE;
		IF mc_ModMove.Error THEN
			mc_ModMove.Execute:= FALSE;
			bError:= TRUE;
			bBusy:= FALSE;
			bDone:= FALSE;
			bAborted:= FALSE;
			nErrorID:= DWORD_TO_UDINT(mc_ModMove.ErrorID);
			cErrorTXT:= 'Error: Axis Modulo Movement error';
			ModMove_state:= 0;
		ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
			mc_AbsMove.Execute:= FALSE;
			bError:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			bDone:= FALSE;
			nErrorID:= 3;
			cErrorTXT:= 'Error: Axis reach limit swith';		
		ELSIF mc_ModMove.Done THEN
			mc_ModMove.Execute:= FALSE;
			bDone:= TRUE;
			bBusy:= FALSE;
			bAborted:= FALSE;
			ModMove_state:= 0;
		ELSIF mc_ModMove.CommandAborted THEN
			mc_ModMove.Execute:= FALSE;
			bAborted:= TRUE;
			bBusy:= FALSE;
			bDone:= FALSE;
			ModMove_state:= 0;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_Power" Id="{7786d1ca-f27e-4e9c-8640-662cfbcab1a5}">
      <Declaration><![CDATA[METHOD Axis_Power
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
mc_Power(
	Axis:= Axis_ref , 
	Enable:= TRUE , 
	Enable_Positive:= bFW_LimitSwith AND bForwordEnable , 
	Enable_Negative:= bBW_LimitSwith AND bBackwordEnable, 
	Override:=100.0 , 
	BufferMode:= , 
	Options:= , 
	Status=> bPowerEn , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_RelMove" Id="{b5fd0d43-6458-464f-9138-7722f9087090}">
      <Declaration><![CDATA[METHOD Axis_RelMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_RelMove(Axis:= Axis_ref);

IF ((bReset_Man OR bReset_Auto) AND (bError OR NOT mc_RelMove.Busy ))
	OR bStop_Man OR bStop_Auto THEN
	mc_RelMove.Execute:= FALSE;
	RelMove_state:= 0;
END_IF

CASE mode OF
	1:
		mc_RelMove.Velocity:= ABS(fSetVel_Man);
		mc_RelMove.Distance:= fSetRelPos_Man;
	2:
		mc_RelMove.Velocity:= ABS(fSetVel_Auto);
		mc_RelMove.Distance:= fSetRelPos_Auto;
END_CASE

RelMove_Rtrig(CLK:= ((mode = 1) AND bRelGo_Man) OR ((mode = 2) AND bRelGo_Auto) );

CASE RelMove_state OF
	0:
		mc_RelMove.Execute:= FALSE;
		IF RelMove_Rtrig.Q THEN
			IF (NOT bForwordEnable) OR (NOT bBackwordEnable) 
				OR ((mc_RelMove.Distance + Axis_ref.NcToPlc.ActPos) > softLimitPOS_FW) 
				OR ((mc_RelMove.Distance + Axis_ref.NcToPlc.ActPos) < softLimitPOS_BW)
				OR (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith)
				OR bError
				THEN
				bError:= TRUE;
				bAborted:= FALSE;
				bBusy:= FALSE;
				bDone:= FALSE;
				IF (NOT bForwordEnable) OR (NOT bBackwordEnable) THEN
					nErrorID:= 1;
					cErrorTXT:= 'Error: Axis not enable';
				ELSIF ((mc_RelMove.Distance + Axis_ref.NcToPlc.ActPos) > softLimitPOS_FW)
				    OR ((mc_RelMove.Distance + Axis_ref.NcToPlc.ActPos) < softLimitPOS_BW) THEN
					nErrorID:= 2;
					cErrorTXT:= 'Error: Axis Relative movement out of limits';
				ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
					nErrorID:= 3;
					cErrorTXT:= 'Error: Axis reach limit swith';
				END_IF
			ELSE
				bBusy:= TRUE;
				bDone:= FALSE;
				bAborted:= FALSE;
				bError:= FALSE;
				nErrorID:= 0;
				cErrorTXT:= '';	
				RelMove_state:= 1;
			END_IF
		END_IF
	1: 
		mc_RelMove.Execute:= TRUE;
		IF mc_RelMove.Error THEN
			mc_RelMove.Execute:= FALSE;
			bError:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			bDone:= FALSE;
			nErrorID:= DWORD_TO_UDINT(mc_RelMove.ErrorID);
			cErrorTXT:= 'Error: Axis Relative movement error';
			RelMove_state:= 0;
		ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
			mc_RelMove.Execute:= FALSE;
			bError:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			bDone:= FALSE;
			nErrorID:= 3;
			cErrorTXT:= 'Error: Axis reach limit swith';
		ELSIF mc_RelMove.Done THEN
			mc_RelMove.Execute:= FALSE;
			bDone:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;
			RelMove_state:= 0;
		ELSIF mc_RelMove.CommandAborted THEN
			mc_RelMove.Execute:= FALSE;
			bAborted:= TRUE;
			bBusy:= FALSE;
			bDone:= FALSE;
			RelMove_state:= 0; 
		END_IF 
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_Reset" Id="{7200e813-2d08-4dba-b447-d35e61a4f7a6}">
      <Declaration><![CDATA[METHOD Axis_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_Reset( Axis:= Axis_ref);
IF bReset_Man OR bReset_Auto THEN
	IF mc_ReadAxisError.AxisErrorID <> 0 THEN	
		mc_Reset.Execute:= TRUE;
		IF mc_Reset.Done THEN
			mc_Reset.Execute:= FALSE;			
			bBusy:= FALSE;
			bDone:= FALSE;
			bAborted:= FALSE;
			bError:= FALSE;
			nErrorID:= 0;
			cErrorTXT:= '';
		END_IF
	ELSE
		mc_Reset.Execute:= FALSE;
			bBusy:= FALSE;
			bDone:= FALSE;
			bAborted:= FALSE;
			bError:= FALSE;
			nErrorID:= 0;
			cErrorTXT:= '';		
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_Stop" Id="{2e68e2fc-ab5e-47f0-8f88-30aee0f39c79}">
      <Declaration><![CDATA[METHOD Axis_Stop
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_Stop( Axis:= Axis_ref );

IF bStop_Man OR bStop_Auto THEN
	mc_Stop.Execute:= TRUE;
	bStop_Man      := FALSE;
	bStop_Auto     := FALSE;
	bBusy          := FALSE;
	bAborted       := FALSE;
ELSE	
	mc_Stop.Execute:= FALSE;
END_IF

IF mc_Stop.Done THEN
	bDone  := TRUE;
END_IF ]]></ST>
      </Implementation>
    </Method>
    <Method Name="Axis_VelMove" Id="{bba8592c-16ff-44a9-90d4-2736beb128c1}">
      <Declaration><![CDATA[METHOD Axis_VelMove
VAR
	fSetVelocity : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_VelMove(Axis:= Axis_ref);

IF ((bReset_Man OR bReset_Auto) AND (bError OR NOT mc_VelMove.Busy)) 
	OR bStop_Auto OR bStop_Man  THEN	
	mc_VelMove.Execute:= FALSE;
	VelMove_state:= 0;
END_IF

CASE mode OF
	1:
		fSetVelocity:= fSetVel_Man;
	2:
		fSetVelocity:= fSetVel_Auto;
END_CASE

IF fSetVelocity >=0 THEN
	mc_VelMove.Direction:= MC_Positive_Direction;
ELSE
	mc_VelMove.Direction:= MC_Negative_Direction;	
END_IF

mc_VelMove.Velocity:= ABS(fSetVelocity);

VelMove_Rtrig(CLK:= ((mode = 1) AND bVelGo_Man ) OR ((mode = 2) AND bVelGo_Auto ));
CASE VelMove_state OF
	0:
		mc_VelMove.Execute:= FALSE;
		IF VelMove_Rtrig.Q THEN
			IF (NOT bForwordEnable) OR (NOT bBackwordEnable) 
				OR (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith)
				OR bError 
				THEN
				bError:= TRUE;
				bBusy:= FALSE;
				bDone:= FALSE;
				bAborted:= FALSE;
				IF (NOT bForwordEnable) OR (NOT bBackwordEnable) THEN
					nErrorID:= 1;
					cErrorTXT:= 'Error: Axis not enable';
				ELSIF (NOT bFW_LimitSwith) OR (NOT bBW_LimitSwith) THEN
					nErrorID:= 3;
					cErrorTXT:= 'Error: Axis reach limit swith';
				END_IF
			ELSE 
				bBusy:= TRUE;
				bDone:= FALSE;
				bAborted:= FALSE;
				bError:= FALSE;
				nErrorID:= 0;
				cErrorTXT:= '';	
				VelMove_state:= 1;
			END_IF
		END_IF
	1:
		mc_VelMove.Execute:= TRUE;
		IF mc_VelMove.Error THEN
			mc_VelMove.Execute:= FALSE;
			bError:= TRUE;
			bBusy:= FALSE;
			bDone:= FALSE;
			bAborted:= FALSE;
			nErrorID:= DWORD_TO_UDINT(mc_VelMove.ErrorID);
			cErrorTXT:= 'Error: Axis Velocity Movement error';
			VelMove_state:= 0;
		ELSIF mc_VelMove.InVelocity THEN//mc_Stop.Busy THEN
			mc_VelMove.Execute:= FALSE;
			bDone:= TRUE;
			bAborted:= FALSE;
			bBusy:= FALSE;			
			VelMove_state:= 0;
		ELSIF mc_VelMove.CommandAborted THEN
			mc_VelMove.Execute:= FALSE;
			bAborted:= TRUE;
			bBusy:= FALSE;
			bDone:= FALSE;
			VelMove_state:= 0; 
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMI_Mapping" Id="{730e107e-9e23-4f5a-a9fd-cb9742f279fc}">
      <Declaration><![CDATA[METHOD HMI_Mapping
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*---------------Input-------------------*)
mode                     := HMISwithMode;     
bStop_Man                := HMI.bStop_Man;  
bHalt_Man                := HMI.bHalt_Man;
bReset_Man               := HMI.bReset_Man;  
bJog_F                   := HMI.bJog_F;  
bJog_B                   := HMI.bJog_B;   
bAddGo_Man               := HMI.bAddGo_Man;
bAbsGo_Man               := HMI.bAbsGo_Man;  
bVelGo_Man               := HMI.bVelGo_Man;  
bRelGo_Man               := HMI.bRelGo_Man;  
bModGo_Man               := HMI.bModGo_Man; 
fSetAbsPos_Man           := HMI.fSetAbsPos_Man;
fSetRelPos_Man           := HMI.fSetRelPos_Man;
fSetModPos_Man           := HMI.fSetModPos_Man; 
fSetVel_Man              := HMI.fSetVel_Man; 
softLimitPOS_FW          := HMI.softLimitPOS_FW :=9999999999; 
softLimitPOS_BW          := HMI.softLimitPOS_BW :=-9999999999; 

(*---------------Output-------------------*)

HMI.bPowerEn              := bPowerEn;
HMI.bBusy                 := bBusy;
HMI.bDone                 := bDone;
HMI.bAborted              := bAborted;
HMI.bError                := bError;
HMI.nErrorID              := nErrorID;
HMI.cErrorTXT             := cErrorTXT;

HMI.bForwordEnable        := bForwordEnable; 
HMI.bBackwordEnable       := bBackwordEnable;  
HMI.bFW_LimitSwith        := bFW_LimitSwith;     
HMI.bBW_LimitSwith        := bBW_LimitSwith;
HMI.bDog_PointSwith       := bDog_PointSwith;

HMI.Axis_ref              := Axis_ref;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Queue_Rec_Cmd" Id="{7e7209e3-6582-4e6a-974f-22dd4e1f4297}">
      <Declaration><![CDATA[METHOD Queue_Rec_Cmd
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE CMD_state OF
0:
	bAbsGo_Auto:=FALSE;
	bRelGo_Auto:=FALSE;
	bVelGo_Auto:=FALSE;
	bReset_Auto:=FALSE;
	bStop_Auto:=FALSE;
	CMD_state:=1;
1:
	IF Queue_RecDel_Flag THEN	
		CMD_state:=10;
		RETURN;
	END_IF

10:	
	CASE Axis_CMD_Itf.FUNCTIONCODE OF
		G00: //ABS
			bAbsGo_Auto:=TRUE;
			fSetAbsPos_Auto:=Axis_CMD_Itf.DATA;
			fSetVel_Auto:=Axis_CMD_Itf.Vel;
			CMD_state:=20;
		G01: //REL
			bRelGo_Auto:=TRUE;
			fSetRelPos_Auto:=Axis_CMD_Itf.DATA;
			fSetVel_Auto:=Axis_CMD_Itf.Vel;
			CMD_state:=20;
		G02: //VEL
			bVelGo_Auto:=TRUE;
			fSetVel_Auto:=Axis_CMD_Itf.Vel;
			IF mc_VelMove.InVelocity THEN
				CMD_state:=20;
			END_IF
		G03:
			CMD_state:=100;
		G04:
			CMD_state:=100;
		G05:// RESET
			CMD_state:=21;
			
		G06:// STOP
			bStop_Auto:=TRUE;	
			CMD_state:=20;
	ELSE
			CMD_state:=0;
	END_CASE
	
20:
	IF NOT bBusy THEN
		CMD_state:=100;		
	ELSIF bError THEN
		CMD_state:=0;
	END_IF
21:
	IF bError THEN
	bReset_Auto:=TRUE;
	CMD_state:=100;	
	END_IF
	IF NOT bError THEN
		CMD_state:=0;
	END_IF
	
100:	
	bAbsGo_Auto:=FALSE;
	bRelGo_Auto:=FALSE;
	bVelGo_Auto:=FALSE;
	bReset_Auto:=FALSE;
	bStop_Auto:=FALSE;
	CMD_state:=0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Read_AxisError" Id="{6bf3c684-245a-409e-92a7-c38c412c90db}">
      <Declaration><![CDATA[METHOD Read_AxisError
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mc_ReadAxisError(
	Axis:= Axis_ref, 
	Enable:= TRUE, 
	 );
IF mc_ReadAxisError.AxisErrorID <> 0 THEN
	bError:= TRUE;
	nErrorID:= DWORD_TO_UDINT(mc_ReadAxisError.AxisErrorID);
	cErrorTXT:= 'Error: Axis Drive Fault';
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>